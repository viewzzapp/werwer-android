
name: Build Android APK

on:
  workflow_dispatch:
    inputs:
      build_id:
        description: 'Build ID from Supabase'
        required: true
      project_id:
        description: 'Project ID from Supabase'
        required: true
      keystore_base64:
        description: 'Base64 encoded keystore (optional, will generate new if empty)'
        required: false
      build_number:
        description: 'Build number'
        required: true
      version:
        description: 'App version'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: npm install

      - name: Initialize Capacitor Android
        run: |
          npx cap add android
          mkdir -p android/app/src/main/assets
          npx cap sync android

      - name: Configure Android Build
        run: |
          BUILD_NUM=${{ github.event.inputs.build_number }}
          VERSION=${{ github.event.inputs.version }}
          
          cat > android/app/build.gradle << GRADLEOF
          apply plugin: 'com.android.application'
          
          android {
              namespace "ewr.ewtrwgtdf546.ccv"
              compileSdkVersion 34
          
              defaultConfig {
                  applicationId "ewr.ewtrwgtdf546.ccv"
                  minSdkVersion 22
                  targetSdkVersion 34
                  versionCode $BUILD_NUM
                  versionName "$VERSION"
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
          
              signingConfigs {
                  release {
                      storeFile file('release.keystore')
                      storePassword 'android'
                      keyAlias 'release'
                      keyPassword 'android'
                  }
              }
          
              buildTypes {
                  release {
                      minifyEnabled false
                      signingConfig signingConfigs.release
                  }
                  debug {
                      minifyEnabled false
                  }
              }
          
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core-ktx:1.12.0'
              implementation 'androidx.core:core-splashscreen:1.0.1'
              implementation project(':capacitor-android')
          }
          GRADLEOF

      - name: Setup Gradle Wrapper
        run: |
          cd android
          if [ ! -f gradlew ]; then
            gradle wrapper --gradle-version 8.2
            chmod +x gradlew
          fi

      - name: Generate app icons
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
          ICON_FILE=$(ls icon.* | head -n 1)
          echo "Using icon file: $ICON_FILE"
          
          for density in ldpi mdpi hdpi xhdpi xxhdpi xxxhdpi; do
            case $density in
              ldpi) size=36 ;;
              mdpi) size=48 ;;
              hdpi) size=72 ;;
              xhdpi) size=96 ;;
              xxhdpi) size=144 ;;
              xxxhdpi) size=192 ;;
            esac
            mkdir -p android/app/src/main/res/mipmap-$density
            convert "$ICON_FILE" -resize ${size}x${size} "android/app/src/main/res/mipmap-$density/ic_launcher.png"
          done

      - name: Setup Keystore
        run: |
          if [ -n "${{ github.event.inputs.keystore_base64 }}" ]; then
            echo "${{ github.event.inputs.keystore_base64 }}" | base64 -d > android/app/release.keystore
            echo "Using provided keystore"
          else
            keytool -genkeypair -v -keystore android/app/release.keystore -alias release -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
            echo "Generated new keystore"
            echo "KEYSTORE_BASE64=$(base64 -w 0 android/app/release.keystore)" >> $GITHUB_ENV
          fi

      - name: Build APK
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Upload build result
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        run: |
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" | head -n 1)
          APK_NAME="app-${{ github.event.inputs.project_id }}-${{ github.event.inputs.build_id }}.apk"

          curl -X POST \
            "$SUPABASE_URL/storage/v1/object/app-builds/$APK_NAME" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary "@$APK_PATH"

          curl -X PATCH \
            "$SUPABASE_URL/rest/v1/builds?id=eq.${{ github.event.inputs.build_id }}" \
            -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -H "Prefer: return=minimal" \
            -d "{\"status\":\"completed\",\"apk_url\":\"$APK_NAME\",\"build_completed_at\":\"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"}" || {
              curl -X PATCH \
                "$SUPABASE_URL/rest/v1/builds?id=eq.${{ github.event.inputs.build_id }}" \
                -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
                -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
                -H "Content-Type: application/json" \
                -H "Prefer: return=minimal" \
                -d '{"status":"failed","build_log":"Failed to upload APK"}'
              exit 1
            }

          if [ -n "$KEYSTORE_BASE64" ]; then
            KEYSTORE_NAME="keystore-${{ github.event.inputs.project_id }}.keystore"
            echo "$KEYSTORE_BASE64" | base64 -d > /tmp/keystore.tmp
            
            curl -X POST \
              "$SUPABASE_URL/storage/v1/object/keystores/$KEYSTORE_NAME" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@/tmp/keystore.tmp"
            
            curl -X PATCH \
              "$SUPABASE_URL/rest/v1/projects?id=eq.${{ github.event.inputs.project_id }}" \
              -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
              -H "Content-Type: application/json" \
              -H "Prefer: return=minimal" \
              -d "{\"keystore_url\":\"$KEYSTORE_NAME\"}"
          fi
